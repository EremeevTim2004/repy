#include <iostream>
#include <vector>

using namespace std;

/* Дана последовательность целых чисел.
** Найти сумму элементов, не попадающих в заданный интервал [a, b]. */
void Task_1(int a, int b, int n) // Функция для выполнения первого задания
{
	int sum = 0; // Инициализация доп переменной

	vector <int> Vec; // Инициализация вектора

	// Заполнение вектора
	int tmp;//

	for (int i = 0; i < n; i++)
	{
		cout << "seq[" << i << "] = ";

		cin >> tmp;

		Vec.push_back(tmp);
	}

	// Вывод на экран первоначального вектора
	for (int i = 0; i < n; i++)
	{
		cout << Vec[i] << " ";
	}

	cout << endl; // Отступ

	// Сумирование всех элементов не попадающих в интервал [a, b]
	for (int i = 0; i < n; i++)
	{
		if (a > Vec.at(i) || Vec.at(i) > b)
		{
			sum += Vec.at(i);
		}
	}

	cout << sum; // Вывод полученного результата
}

/* Дана последовательность целых чисел.
** После каждого минимального элемента вставить масимальный. */
void Task_5(int n) // Функция для выполнения второго задания
{
	int min = 99, max = -1; // Инициализация доп переменных

	vector <int> Vec; // Инициализация вектора

	int tmp; //

	//
	for (int i = 0; i < n; i++)
	{
		cout << "seq[" << i << "] = ";

		cin >> tmp;

		Vec.push_back(tmp);
	}

	// Вывод изначального вектора
	for (int i = 0; i < n; i++)
	{
		 cout << Vec[i] << " ";
	}

	cout << endl; // Отступ

	// Нахождение минимального и максимального элемента
	for (int i = 0; i < n; i++)
	{
		// Нахожддение максимума
		if (Vec[i] > max)
		{
			max = Vec[i];
		}

		// Нахождение минимума
		if (Vec[i] < min)
		{
			min = Vec[i];
		}
	}

	// Вставка максимума после каждого минимального элемента
	for (int i = 0; i < n; i ++)
	{
		if (Vec[i] == min)
		{
			Vec.insert(Vec.begin() + i + 1, max);
		}

		n = Vec.size(); // Обновление длины вектора
	}

	// Вывод изменённого вектора
	for (int i = 0; i < n; i++)
	{
		cout  << Vec[i] << " ";
	}

	cout << endl; // Отступ
}

/* Даны две последовательности целых чиселю
** В первой последовательности удалить все чётные элементы, во второй - все нечётные.
** Отсортировать данные последовательности.
** Объединить их в одну отсортированную последовательность. */
void Task_11(int n1, int n2) // Функция для выполнение третьего задания
{
	// Инициализация двух векторов
	vector <int> Vec1;
	vector <int> Vec2;

	int tmp; //

	//
	for (int i = 0; i < n1; i++)
	{
		cout << "seq[" << i << "] = ";

		cin >> tmp;

		Vec1.push_back(tmp);
	}

	cout << endl; // Отступ

	// Заполнение второго вектора
	for (int i = 0; i < n2; i++)
	{
		cout << "seq[" << i << "] = ";

		cin >> tmp;

		Vec2.push_back(tmp);
	}

	cout << endl; // Отступ

	// Вывод первого изначального вектора
	for (int i = 0; i < n1; i++)
	{
		cout << Vec1[i] << " ";
	}

	cout  << endl; // Отступ

	// Вывод второго изначального вектора
	for (int i = 0; i < n2; i++)
	{
		cout << Vec2[i] << " ";
	}

	cout << endl; // Отступ

	// Удаление чётных элементов из первого вектора
	for (int i = 0; i < n1; i++)
	{
		if (Vec1[i] % 2 == 0)
		{
			Vec1.erase(Vec1.begin() + i);

			n1 = Vec1.size();
		}
	}
/*
	// Вывод первого изменённого массива
	for (int i = 0; i < n1; i++)
	{
		cout << Vec2[i] << " ";
	}

	cout << endl; // Отступ
*/
	// Удаление нечётных элементов из второго вектора
	for (int i = 0; i < n2; i++)
	{
		if (Vec2[i] % 2 != 0)
		{
			Vec2.erase(Vec2.begin() + i);

			n2 = Vec2.size();
		}
	}
/*
	// Вывод второго изменённого массива
	for (int i = 0; i < n2; i++)
	{
		cout << Vec2[i] << " ";
	}

	cout << endl; // Отступ
*/
	vector <int> Vec; // Инициализация единого вектора

	// Закидываем первый вектор в единый вектор
	for (int i = 0; i < n1; i++)
	{
		Vec.push_back(Vec1[i]);
	}

	// Закидываем второй вектор в единый вектор
	for (int i = 0; i < n2; i++)
	{
		Vec.push_back(Vec2[i]);
	}

	int n = Vec.size(); // Определение размера единного вектора

	// Вывод единого отсортированного вектора
	for (int i = 0; i < n; i++)
	{
		cout << Vec[i] << " ";
	}

	cout << endl; // Отступ
}

int main() // Главная функция
{
	int Task; // Инициализация доп переменной

	cout << "whitch task? (1, 5, 11)" << endl << ">>";
	cin >> Task;

	switch(Task) // Выбор задания через свитч-кэйс
	{
		case 1: //
		{

			int n; //

			cout << "Ввелите кол-во чисел в массиве." << endl << ">>";
			cin >> n; //

			int a, b; //

			cout << "Введите границы промежутка." << endl << ">>";
			cin >> a >> b; //

			Task_1(a, b, n); //

			break;
		}

		case 5: //
		{
			int n; //

			cout << "Ввелите кол-во чисел в массиве" << endl << ">>";
			cin >> n; //

			Task_5(n); //

			break;
		}

		case 11: //
		{
			int n1, n2; //

			cout << "Введите ко-во чисел в первом и втором массиве." << endl << ">>";
			cin >> n1 >> n2; //

			Task_11(n1, n2); //

			break;
		}

		default: //
		{
			cout << "Error! No such task's number!" << std::endl; //

			break;
		}

	}

	return 0;
}
